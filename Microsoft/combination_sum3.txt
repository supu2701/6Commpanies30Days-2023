class Solution {
public:
    
    void dfs(int num, int sum, int count, vector<int> &path, vector<vector<int>> &ans){
        
       if(sum==0 && count==0){
           ans.push_back(path);
           return;
       }
        
        //The invalid cases
        
        if(sum==0 || count==0){
           return; 
        }
        
        if(num>9) return;
        
        //take that number
        if(num<=sum && count>0){
            path.push_back(num);
            dfs(num+1,sum-num,count-1,path,ans);
            path.pop_back();  //To remove the element from path as we backtracked
        }
        
        
        
        //Leeave that number if t=any ppath from that number returned and lead to invalid case
        dfs(num+1,sum,count,path,ans);
        
    }
    //backtracking is the most appropriate idea to apply here
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> path;
        dfs(1,n,k,path,ans);
        return ans;
        
    }
};
